{"version":3,"sources":["../src/main.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import _ from \"underscore\";\n\nlet nextUid = 0;\nlet mkuid = () => nextUid += 1;\n\nlet union = (first, second) => new Set([...Array.from(first), ...Array.from(second)]);\nlet intersection = (first, second) => new Set(Array.from(first).filter(item => second.has(item)));\nlet difference = (first, second) => new Set(Array.from(first).filter(item => !second.has(item)));\n\nlet popKey = function(x, k) {\n  if (!(k in x)) {\n    throw new Error(`object has no key ${k}`);\n  }\n  let v = x[k];\n  delete x[k];\n  return v;\n};\n\nlet mapPop = function(x, k) {\n  let v = x.get(k);\n  x.delete(k);\n  return v;\n};\n\nlet mkMap = function(xs) {\n  let k, v;\n  if (xs == null) { xs = []; }\n  let map = (Object.create != null) ? Object.create(null) : {};\n  if (_.isArray(xs)) {\n    for ([k,v] of xs) { map[k] = v; }\n  } else {\n    for (k in xs) { v = xs[k]; map[k] = v; }\n  }\n  return map;\n};\n\nlet sum = function(xs) {\n  let n = 0;\n  for (let x of xs) { n += x; }\n  return n;\n};\n\n//\n// Events and pub-sub dependency management\n//\n\n// Just a global mapping from subscription UIDs to source Evs; this essentially\n// enables us to follow subscription UIDs up the dependency graph (from\n// dependents)\nexport class DepMgr {\n  constructor() {\n    this.buffering = 0;\n    this.buffer = [];\n    this.events = new Set();\n  }\n  // called by Ev.sub to register a new subscription\n  transaction(f) {\n    let res;\n    this.buffering += 1;\n    try {\n      res = f();\n    } finally {\n      this.buffering -= 1;\n      if (this.buffering === 0) {\n        let immediateDeps = new Set(_.flatten(Array.from(this.events).map(({downstreamCells}) =>\n          Array.from(downstreamCells))));\n        let allDeps = allDownstream(...Array.from(immediateDeps || []));\n        allDeps.forEach(cell => cell._shield = true);\n        try {\n          // we need to clear the buffer now, in case transaction is called as a result of one\n          // the events that we're publishing, since that would cause transaction to execute again with\n          // the full buffer, causing an infinite loop.\n          let bufferedPubs = this.buffer;\n          this.buffer = [];\n          this.events.clear();\n\n          bufferedPubs.map(([ev, data]) => ev.pub(data));\n          allDeps.forEach(c => c.refresh());\n        } finally {\n          allDeps.forEach(cell => cell._shield = false);\n        }\n      }\n    }\n    return res;\n  }\n}\n\nexport let _depMgr = new DepMgr();\nlet depMgr = _depMgr;\n\nexport class Ev {\n  constructor(init, observable) {\n    this.observable = observable;\n    this.init = init;\n    this.subs = mkMap();\n    this.downstreamCells = new Set();\n  }\n  sub(listener) {\n    let uid = mkuid();\n    if (this.init != null) { listener(this.init()); }\n    this.subs[uid] = listener;\n    return uid;\n  }\n  // callable only by the src\n  pub(data) {\n    if (depMgr.buffering) {\n      depMgr.buffer.push([this, data]);\n      depMgr.events.add(this);\n    } else {\n      for (let uid in this.subs) {\n        let listener = this.subs[uid];\n        listener(data);\n      }\n    }\n  }\n  unsub(uid) {\n    return popKey(this.subs, uid);\n  }\n  // listener is subscribed only for the duration of the context\n  scoped(listener, context) {\n    let uid = this.sub(listener);\n    try { return context(); }\n    finally {this.unsub(uid); }\n  }\n  stream(transform=_.identity, init=null) {\n    let dep = new DepCell(function(...args) {\n      let recorded = this.record(() => transform.call(this._cell, ...args));\n      if(recorded !== undefined) {\n        return this.done(recorded);\n      }\n      return this.done(this._cell.raw());\n    }, init);\n    autoSub(this, (...args) => dep._refreshArgs(...args));\n    return dep;\n  }\n  promiseStream(transform=_.identity, init=null) {\n    let promiseCell = this.stream(transform, new Promise(resolve => resolve(init)));\n    return promiseBind(init, () => promiseCell.get());\n  }\n}\n\nexport let skipFirst = function(f) {\n  let first = true;\n  return function(...args) {\n    if (first) {\n      first = false;\n      return undefined;\n    } else {\n      return f.apply(this, args || []);\n    }\n  };\n};\n\n//\n// Reactivity\n//\nexport let upstream = function(cell) {\n  let events = Array.from(cell.upstreamEvents);\n  let depCells = events.map(ev => ev.observable);\n  return Array.from(new Set(depCells));\n};\n\nvar allDownstreamHelper = function(...cells) {\n  if (cells.length) {\n    let downstream = Array.from(new Set(_.flatten(cells.map(cell => Array.from(cell.onSet.downstreamCells)))));\n    return _.flatten([downstream, allDownstreamHelper(...Array.from(downstream || []))]);\n  }\n  return [];\n};\n\nexport let allDownstream = (...cells) => Array.from(\n  new Set([\n    ...cells,\n    ...allDownstreamHelper(...(cells || []))\n  ].reverse())\n).reverse();\n\n\nclass Recorder {\n  constructor() {\n    this.stack = [];\n    this.isMutating = false;\n    this.isIgnoring = false;\n    this.hidingMutationWarnings = false;\n    this.onMutationWarning = new Ev(); // just fires null for now\n  }\n  // takes a dep cell and push it onto the stack as the current invalidation\n  // listener, so that calls to .sub (e.g. by ObsCell.get) can establish a\n  // dependency\n  record(dep, f) {\n    if ((this.stack.length > 0) && !this.isMutating) { _(this.stack).last().addNestedBind(dep); }\n    this.stack.push(dep);\n    // reset isMutating\n    let wasMutating = this.isMutating;\n    this.isMutating = false;\n    // reset isIgnoring\n    let wasIgnoring = this.isIgnoring;\n    this.isIgnoring = false;\n    try {\n      return f();\n    } finally {\n      this.isIgnoring = wasIgnoring;\n      this.isMutating = wasMutating;\n      this.stack.pop();\n    }\n  }\n\n  // subscribes the current cell to an event; the cell will refresh if the event fires and condFn returns true.\n  // note that we are establishing both directions of the dependency tracking here (subscribing\n  // to the dependency's events as well as registering the subscription UID with the current listener)\n  sub(event, condFn) {\n    if (condFn == null) { condFn = () => true; }\n    if ((this.stack.length > 0) && !this.isIgnoring) {\n      let topCell = _(this.stack).last();\n      topCell.upstreamEvents.add(event);\n      event.downstreamCells.add(topCell);\n      return autoSub(event, function(...evData) {\n        if (condFn(...Array.from(evData || []))) { return topCell.refresh(); }\n      });\n    }\n  }\n\n  addCleanup(cleanup) {\n    if (this.stack.length > 0) { return _(this.stack).last().addCleanup(cleanup); }\n  }\n  // Delimit the function as one where a mutation takes place, such that if\n  // within this function we refresh a bind, we don't treat that bind as a\n  // nested bind (which causes all sorts of problems e.g. the cascading\n  // disconnects)\n  hideMutationWarnings(f) {\n    let wasHiding = this.hidingMutationWarnings;\n    this.hidingMutationWarnings = true;\n    try { return f(); }\n    finally {this.hidingMutationWarnings = wasHiding; }\n  }\n\n  fireMutationWarning() {\n    /*eslint-disable*/\n    console.warn(\"Mutation to observable detected during a bind context\");\n    /*eslint-enable*/\n    return this.onMutationWarning.pub(null);\n  }\n  mutating(f) {\n    if ((this.stack.length > 0) && !this.hidingMutationWarnings) {\n      this.fireMutationWarning();\n    }\n    let wasMutating = this.isMutating;\n    this.isMutating = true;\n    try { return f(); }\n    finally {this.isMutating = wasMutating; }\n  }\n  // Ignore event hooks while evaluating f (but limited to the current bind\n  // context; subsequent binds will still subscribe those binds to event hooks)\n  ignoring(f) {\n    let wasIgnoring = this.isIgnoring;\n    this.isIgnoring = true;\n    try { return f(); }\n    finally {this.isIgnoring = wasIgnoring; }\n  }\n}\n\nexport let types = {\"cell\": \"cell\", \"array\": \"array\", \"map\": \"map\", \"set\": \"set\"};\n\nexport let _recorder = new Recorder();\nlet recorder = _recorder;\n\nexport let hideMutationWarnings = f => recorder.hideMutationWarnings(f);\n\nexport let asyncBind = function(init, f) {\n  let dep = new DepCell(f, init);\n  dep.refresh();\n  return dep;\n};\n\nexport let promiseBind = (init, f, catcher=() => null) => asyncBind(\n  init,\n  function() {\n    let promise = this.record(f);\n    promise.then(result => this.done(result)).catch(reason => this.done(catcher(reason)));\n    return promise;\n  }\n);\n\nexport let bind = f => asyncBind(null, function() { return this.done(this.record(f)); });\n\nexport let lagBind = function(lag, init, f) {\n  let timeout = null;\n  return asyncBind(init, function() {\n    if (timeout != null) { clearTimeout(timeout); }\n    return timeout = setTimeout(\n      () => this.done(this.record(f)),\n      lag\n    );\n  });\n};\n\nexport let postLagBind = function(init, f) {\n  let timeout = null;\n  return asyncBind(init, function() {\n    let {val, ms} = this.record(f);\n    if (timeout != null) {\n      clearTimeout(timeout);\n    }\n    return timeout = setTimeout(\n      () => this.done(val),\n      ms\n    );\n  });\n};\n\nexport let snap = f => recorder.ignoring(f);\n\nexport let onDispose = cleanup => recorder.addCleanup(cleanup);\n\nexport let autoSub = function(ev, listener) {\n  let subid = ev.sub(listener);\n  onDispose(() => ev.unsub(subid));\n  return subid;\n};\n\nexport let subOnce = function(event, listener) {\n  let uid = autoSub(event, skipFirst((...args) => {\n    listener(...args);\n    event.unsub(uid);\n  }));\n  return uid;\n};\n\nclass ObsBase {\n  constructor() {\n    this.events = [];\n    this._mkEv();\n  }\n  flatten() { return flatten(this); }\n  subAll(condFn) { if (condFn == null) { condFn = () => true; } return this.events.forEach(ev => recorder.sub(ev, condFn)); }\n  raw() { return this._base; }\n  _mkEv(f) {\n    let ev = new Ev(f, this);\n    this.events.push(ev);\n    return ev;\n  }\n  toCell() {return cell.from(this);}\n  toArray() {return array.from(this);}\n  toMap() {return map.from(this);}\n  toSet() {return set.from(this);}\n\n}\n\nexport {ObsBase};\n\nexport class ObsCell extends ObsBase {\n  constructor(_base) {\n    super();\n    this._base = _base != null ? _base : null;\n    this.onSet = this._mkEv(() => [null, this._base]); // [old, new]\n    this._shield = false;\n    autoSub(this.onSet, () => this._refreshAll());\n  }\n  _refreshAll() {\n    let downstreamCells = this.onSet.downstreamCells;\n    if (downstreamCells.size && !this._shield) {\n      this._shield = true;\n      let cells = allDownstream(...Array.from(downstreamCells) || []);\n      cells.forEach(c => c._shield = true);\n      try { return cells.forEach(c => c.refresh()); }\n      finally {\n        cells.forEach(c => c._shield = false);\n        this._shield = false;\n      }\n    }\n  }\n\n  all() {\n    this.subAll(() => !this._shield);\n    return this._base;\n  }\n  get() { return this.all(); }\n  readonly() { return new DepCell(() => this.all()); }\n  _update(x) {\n    if (this._base !== x) {\n      let old = this._base;\n      this._base = x;\n      this.onSet.pub([old, x]);\n      return old;\n    }\n    return this._base;\n  }\n}\n\nexport class SrcCell extends ObsCell {\n  update(x) {\n    return recorder.mutating(() => this._update(x));\n  }\n  set(x) {return this.update(x);}\n}\n\nexport let INIT = Symbol(\"init\");\nexport let REFRESHING = Symbol(\"refreshing\");\nexport let LOADED = Symbol(\"loaded\");\nexport let DISCONNECTED = Symbol(\"disconnected\");\nexport let ERROR = Symbol(\"error\");\n\nexport class DepCell extends ObsCell {\n  constructor(body, init) {\n    super(init != null ? init : null);\n    this.body = body != null ? body : null;\n    this.refreshing = false;\n    this.nestedBinds = [];\n    this.cleanups = [];\n    this.upstreamEvents = new Set();\n\n    this._rawStatus = INIT;\n    this.onStatusChange = this._mkEv(() => this._rawStatus);\n    autoSub(this.onStatusChange, (status) => this._rawStatus = status);\n    this._statusCell = null; // cannot immediately initialize because infinite loop\n  }\n  get status() {\n    if(!this._statusCell) {\n      this._statusCell = this.onStatusChange.stream(_.identity);\n    }\n    return this._statusCell;\n  }\n  refresh() {\n    return this._refreshArgs();\n  }\n  _refreshArgs(...args) {\n    if(!this.refreshing) {\n      this.onStatusChange.pub(REFRESHING);\n      let old = this._base;\n      // TODO we are immediately disconnecting; something that disconnects upon\n      // completion may have better semantics for asynchronous operations:\n      //\n      // - enabling lagBind to defer evaluation so long as its current\n      //   dependencies keep changing\n      // - allowing nested binds to continue reacting during asynchronous\n      //   operation\n      //\n      // But the implementation is more complex as it requires being able to\n      // create and discard tentative recordings.  It's also unclear whether\n      // such a lagBind is more desirable (in the face of changing dependencies)\n      // and whether on-completion is what's most generalizable.\n      let realDone = _base => {\n        this._base = _base;\n        try{\n          return this.onSet.pub([old, this._base]);\n        }\n        finally {\n          this.onStatusChange.pub(LOADED);\n        }\n      };\n      let recorded = false;\n      let syncResult = null;\n      let isSynchronous = false;\n      let _cell = this;\n      let env = {\n        // next two are for tolerating env.done calls from within env.record\n        record: f => {\n          // TODO document why @refreshing exists\n          // guards against recursively evaluating this recorded\n          // function (@body or an async body) when calling `.get()`\n          if (!this.refreshing) {\n            let res;\n            this.disconnect();\n            if (recorded) {\n              throw new Error(\"this refresh has already recorded its dependencies\");\n            }\n            this.refreshing = true;\n            this.disconnect();\n            if (recorded) {\n              throw new Error(\"this refresh has already recorded its dependencies\");\n            }\n            recorded = true;\n            try {\n              res = recorder.record(this, () => f());\n            }\n            finally {\n              this.refreshing = false;\n            }\n            if (isSynchronous) {\n              realDone(syncResult);\n            }\n            return res;\n          }\n        },\n        done: x => {\n          if (old !== x) {\n            if (this.refreshing) {\n              isSynchronous = true;\n              return syncResult = x;\n            } else {\n              return realDone(x);\n            }\n          }\n        },\n        _cell\n      };\n      let r;\n      try {\n        r = this.body.call(env, ...args);\n        this.onStatusChange.pub(LOADED);\n      }\n      catch(e) {\n        this.onStatusChange.pub(ERROR);\n        throw(e);\n      }\n      return r;\n    }\n  }\n  // unsubscribe from all dependencies and recursively have all nested binds\n  // disconnect themselves as well\n  disconnect() {\n    // TODO ordering of cleanup vs unsubscribes may require revisiting\n    for (let cleanup of this.cleanups) {\n      cleanup();\n    }\n    for (let nestedBind of this.nestedBinds) {\n      nestedBind.disconnect();\n    }\n    this.nestedBinds = [];\n    this.cleanups = [];\n    this.upstreamEvents.forEach(ev => ev.downstreamCells.delete(this));\n    this.upstreamEvents.clear();\n    if(!this.refreshing) {\n      this.onStatusChange.pub(DISCONNECTED);\n    }\n  }\n  // called by recorder\n  addNestedBind(nestedBind) {\n    return this.nestedBinds.push(nestedBind);\n  }\n  // called by recorder\n  addCleanup(cleanup) {\n    return this.cleanups.push(cleanup);\n  }\n}\n\nexport class ObsArray extends ObsBase {\n  constructor(_cells, diff) {\n    if (_cells == null) { _cells = []; }\n    if (diff == null) { diff = basicDiff(); }\n    super();\n    this._cells = _cells;\n    this.diff = diff;\n    this.onChange = this._mkEv(() => [0, [], this._cells.map(c => c.raw())]); // [index, removed, added]\n    this.onChangeCells = this._mkEv(() => [0, [], this._cells]); // [index, removed, added]\n    this._indexed = null;\n  }\n  all() {\n    recorder.sub(this.onChange);\n    return this._cells.map(c => c.get());\n  }\n  raw() { return this._cells.map(c => c.raw()); }\n  readonly() { return new DepArray(() => this.all()); }\n  rawCells() { return this._cells; }\n  at(i) {\n    recorder.sub(this.onChange, function([index, removed, added]) {\n      // if elements were inserted or removed prior to this element\n      if ((index <= i) && (removed.length !== added.length))\n        return true;\n      // if this element is one of the elements changed\n      if ((removed.length === added.length) && (i <= (index + removed.length)))\n        return true;\n      return false;\n    });\n    return (this._cells[i] != null ? this._cells[i].get() : undefined);\n  }\n  length() {\n    recorder.sub(this.onChangeCells, ([index, removed, added]) => removed.length !== added.length);\n    return this._cells.length;\n  }\n  size() { return this.length(); }\n  map(f) {\n    let ys = new MappedDepArray();\n    autoSub(this.onChangeCells, ([index, removed, added]) => {\n      for (let cell of ys._cells.slice(index, index + removed.length)) {\n        cell.disconnect();\n      }\n      let newCells = added.map(item => bind(() => f(item.get())));\n      return ys.realSpliceCells(index, removed.length, newCells);\n    });\n    return ys;\n  }\n  transform(f, diff) { return new DepArray((() => f(this.all())), diff); }\n  filter(f) { return this.transform(arr => arr.filter(f)); }\n  slice(x, y) { return this.transform(arr => arr.slice(x, y)); }\n  reduce(f, init) {  return this.all().reduce(f, init != null ? init : this.at(0)); }\n  reduceRight(f, init) {  return this.all().reduceRight(f, init != null ? init : this.at(0)); }\n  every(f) {  return this.all().every(f); }\n  some(f) {  return this.all().some(f); }\n  indexOf(val, from) { if (from == null) { from = 0; } return this.all().indexOf(val, from); }\n  lastIndexOf(val, from) {\n    if (from == null) { from = this.length() - 1; }\n    return this.all().lastIndexOf(val, from);\n  }\n  join(separator) {  if (separator == null) { separator = \",\"; } return this.all().join(separator); }\n  first() { return this.at(0); }\n  last() { return this.at(this.length() - 1); }\n  indexed() {\n    if ((this._indexed == null)) {\n      this._indexed = new IndexedDepArray();\n      autoSub(this.onChangeCells, ([index, removed, added]) =>\n        this._indexed.realSpliceCells(index, removed.length, added));\n    }\n    return this._indexed;\n  }\n  concat(...those) { return concat(this, ...those); }\n  realSpliceCells(index, count, additions) {\n    let removed = this._cells.splice.apply(this._cells, [index, count].concat(additions));\n    let removedElems = snap(() => removed.map((x2) => x2.get()));\n    let addedElems = snap(() => additions.map((x3) => x3.get()));\n    return transaction(() => {\n      this.onChangeCells.pub([index, removed, additions]);\n      return this.onChange.pub([index, removedElems, addedElems]);\n    });\n  }\n  realSplice(index, count, additions) {\n    return this.realSpliceCells(index, count, additions.map(cell));\n  }\n  _update(val, diff) {\n    let left, splices;\n    let old = snap(() => (this._cells.map((x) => x.get())));\n    let fullSplice = [0, old.length, val];\n    diff = diff || this.diff;\n    left = permToSplices(old.length, val, diff(old, val));\n    splices = left != null ? left : [fullSplice];\n    return splices.map(([index, count, additions]) => this.realSplice(index, count, additions));\n  }\n}\n\nexport class SrcArray extends ObsArray {\n  spliceArray(index, count, additions) { return recorder.mutating(() => {\n    return this.realSplice(index, count, additions);\n  }); }\n  splice(index, count, ...additions) { return this.spliceArray(index, count, additions); }\n  insert(x, index) { return this.splice(index, 0, x); }\n  remove(x) {\n    let i = _(this.raw()).indexOf(x);\n    if (i >= 0) { return this.removeAt(i); }\n  }\n  removeAll(x) {\n    return transaction(() => {\n      let i = _(snap(() => this.all())).indexOf(x);\n      while (i >= 0) {\n        this.removeAt(i);\n        i = snap(() => _(this.all().slice(i))).indexOf(x);\n      }\n    });\n  }\n  removeAt(index) {\n    let val = snap(() => this.at(index));\n    this.splice(index, 1);\n    return val;\n  }\n  push(x) { return this.splice(snap(() => this.length()), 0, x); }\n  pop() { return this.removeAt(snap(() => this.length() - 1)); }\n  put(i, x) { return this.splice(i, 1, x); }\n  replace(xs) { return this.spliceArray(0, snap(() => this.length()), xs); }\n  unshift(x) { return this.insert(x, 0); }\n  shift() { return this.removeAt(0); }\n  // TODO: How is this different from replace? we should use one or the other.\n  update(xs) { return recorder.mutating(() => this._update(xs)); }\n  move(src, dest) { return transaction(() => {\n    // moves element at src to index before dest\n    if (src === dest) { return; }\n\n    let len = snap(() => this.length());\n\n    if ((src < 0) || (src > (len - 1))) {\n      throw `Source ${src} is outside of bounds of array of length ${len}`;\n    }\n    if ((dest < 0) || (dest > len)) {\n      throw `Destination ${dest} is outside of bounds of array of length ${len}`;\n    }\n\n    let val = snap(() => this.all()[src]);\n\n    if (src > dest) {\n      this.removeAt(src);\n      this.insert(val, dest);\n    } else {\n      this.insert(val, dest);\n      this.removeAt(src);\n    }\n\n  }); }  // removeAt returns, but insert doesn't, so let's avoid inconsistency\n  swap(i1, i2) { return transaction(() => {\n    let len = snap(() => this.length());\n    if ((i1 < 0) || (i1 > (len - 1))) {\n      throw `i1 ${i1} is outside of bounds of array of length ${len}`;\n    }\n    if ((i2 < 0) || (i2 > (len - 1))) {\n      throw `i2 ${i2} is outside of bounds of array of length ${len}`;\n    }\n\n    let first = Math.min(i1, i2);\n    let second = Math.max(i1, i2);\n\n    this.move(first, second);\n    return this.move(second, first);\n  }); }\n\n  reverse() {\n    // Javascript's Array.reverse both reverses the Array and returns its new value\n    this.update(snap(() => this.all().reverse()));\n    return snap(() => this.all());\n  }\n}\n\nexport class MappedDepArray extends ObsArray {\n  constructor() { super(); }\n}\n\nexport class IndexedDepArray extends ObsArray {\n  constructor(xs, diff) {\n    if (xs == null) { xs = []; }\n    super(xs, diff);\n    this.is = (this._cells.map((x, i) => cell(i)));\n    this.onChangeCells = this._mkEv(() => [0, [], _.zip(this._cells, this.is)]); // [index, removed, added]\n    this.onChange = this._mkEv(() => [0, [], _.zip(this.is, snap(() => this.all()))]);\n  }\n  // TODO duplicate code with ObsArray\n  map(f) {\n    let ys = new MappedDepArray();\n    autoSub(this.onChangeCells, ([index, removed, added]) => {\n      for (let cell of ys._cells.slice(index, index + removed.length)) {\n        cell.disconnect();\n      }\n      let newCells = added.map(([item, icell]) => bind(() => f(item.get(), icell)));\n      return ys.realSpliceCells(index, removed.length, newCells);\n    });\n    return ys;\n  }\n  realSpliceCells(index, count, additions) {\n    let i;\n    let removed = this._cells.splice.apply(this._cells, [index, count].concat(additions));\n    let removedElems = snap(() => removed.map((x2) => x2.get()));\n\n    let iterable = this.is.slice(index + count);\n    for (let offset = 0; offset < iterable.length; offset++) {\n      i = iterable[offset];\n      i.set(index + additions.length + offset);\n    }\n    let newIs = [];\n    let end = additions.length;\n    let asc = 0 <= end;\n    for (i = 0; asc ? i < end : i > end; asc ? i++ : i--) {\n      newIs.push(cell(index + i));\n    }\n    this.is.splice(index, count, ...newIs);\n\n    let addedElems = snap(() => additions.map((x3) => x3.get()));\n    return transaction(() => {\n      this.onChangeCells.pub([index, removed, _.zip(additions, newIs)]);\n      return this.onChange.pub([index, removedElems, _.zip(addedElems, newIs)]);\n    });\n  }\n}\n\nexport class DepArray extends ObsArray {\n  constructor(f, diff) {\n    super([], diff);\n    this.f = f;\n    autoSub((bind(() => Array.from(this.f()))).onSet, ([old, val]) => this._update(val));\n  }\n}\n\nexport class IndexedArray extends DepArray {\n  constructor(_cells) {\n    super();\n    this._cells = _cells;\n  }\n  map(f) {\n    let ys = new MappedDepArray();\n    autoSub(this._cells.onChange, ([index, removed, added]) =>\n      ys.realSplice(index, removed.length, added.map(f))\n    );\n    return ys;\n  }\n}\n\nexport let concat = function(...xss) {\n  let ys = new MappedDepArray();\n  let casted = xss.map(xs => cast(xs, \"array\"));\n  let repLens = xss.map(() => 0);\n  casted.forEach((xs, i) =>\n    autoSub(xs.onChange, function([index, removed, added]) {\n      let xsOffset = sum(repLens.slice(0, i));\n      repLens[i] += added.length - removed.length;\n      return ys.realSplice(xsOffset + index, removed.length, added);\n    })\n  );\n  return ys;\n};\n\nlet objToJSMap = function(obj) {\n  if (obj instanceof Map) { return obj;\n  } else if (_.isArray(obj) || obj instanceof Set) { return new Map(obj);\n  } else { return new Map(_.pairs(obj)); }\n};\n\nexport class ObsMap extends ObsBase {\n  constructor(_base) {\n    if (_base == null) { _base = new Map(); }\n    super();\n    this._base = objToJSMap(_base);\n    this.onAdd = this._mkEv(() => new Map(this._base)); // {key: new...}\n    this.onRemove = this._mkEv(() => new Map()); // {key: old...}\n    this.onChange = this._mkEv(() => new Map()); // {key: [old, new]...}\n  }\n  get(key) {\n    this.subAll(result => result.has(key));\n    return this._base.get(key);\n  }\n  has(key) {\n    recorder.sub(this.onAdd, additions => additions.has(key));\n    recorder.sub(this.onRemove, removals => removals.has(key));\n    return this._base.has(key);\n  }\n  all() {\n    this.subAll();\n    return new Map(this._base);\n  }\n  readonly() { return new DepMap(() => this.all()); }\n  size() {\n    recorder.sub(this.onRemove);\n    recorder.sub(this.onAdd);\n    return this._base.size;\n  }\n  _realPut(key, val) {\n    if (this._base.has(key)) {\n      let old = this._base.get(key);\n      if (old !== val) {\n        this._base.set(key, val);\n        this.onChange.pub(new Map([[key, [old, val]]]));\n      }\n      return old;\n    } else {\n      this._base.set(key, val);\n      this.onAdd.pub(new Map([[key, val]]));\n      return undefined;\n    }\n  }\n  _realRemove(key) {\n    let val = mapPop(this._base, key);\n    this.onRemove.pub(new Map([[key, val]]));\n    return val;\n  }\n  _update(other) {\n    let val;\n    let otherMap = objToJSMap(other);\n    let ret = new Map(this._base);\n    let removals = _\n      .chain(Array.from(this._base.keys()))\n      .difference(Array.from(otherMap.keys()))\n      .map(k => [k, mapPop(this._base, k)])\n      .value();\n\n    let additions = _\n      .chain(Array.from(otherMap.keys()))\n      .difference(Array.from(this._base.keys()))\n      .map(k => {\n        val = otherMap.get(k);\n        this._base.set(k, val);\n        return [k, val];\n      })\n      .value();\n\n    let changes = _\n      .chain(Array.from(otherMap))\n      .filter(([k, val]) => this._base.has(k) && this._base.get(k) !== val)\n      .map(([k, val]) => {\n        let old = this._base.get(k);\n        this._base.set(k, val);\n        return [k, [old, val]];\n      })\n      .value();\n\n    transaction(() => {\n      if (removals.length) { this.onRemove.pub(new Map(removals)); }\n      if (additions.length) { this.onAdd.pub(new Map(additions)); }\n      if (changes.length) { return this.onChange.pub(new Map(changes)); }\n    });\n\n    return ret;\n  }\n}\n\nexport class SrcMap extends ObsMap {\n  put(key, val) { return recorder.mutating(() => this._realPut(key, val)); }\n  set(key, val) { return this.put(key, val); }\n  delete(key) { return recorder.mutating(() => {\n    let val = undefined;\n    if (this._base.has(key)) {\n      val = this._realRemove(key);\n      this.onRemove.pub(new Map([[key, val]]));\n    }\n    return val;\n  }); }\n  remove(key) { return this.delete(key); }\n  clear() { return recorder.mutating(() => {\n    let removals = new Map(this._base);\n    this._base.clear();\n    if (removals.size) { this.onRemove.pub(removals); }\n    return removals;\n  }); }\n  update(x) { return recorder.mutating(() => this._update(x)); }\n}\n\nexport class DepMap extends ObsMap {\n  constructor(f) {\n    super();\n    this.f = f;\n    let c = bind(this.f);\n    autoSub(c.onSet, ([old, val]) => this._update(val));\n  }\n}\n\n//\n// Converting POJO attributes to reactive ones.\n//\n\nlet objToJSSet = function(obj) { if (obj instanceof Set) { return obj; } else { return new Set(obj); } };\nlet _castOther = function(other) {\n  if (other instanceof ObsBase) { other = other.all(); }\n  return new Set(other);\n};\n\nexport class ObsSet extends ObsBase {\n  constructor(_base) {\n    if (_base == null) { _base = new Set(); }\n    super();\n    this._base = objToJSSet(_base);\n    this.onChange = this._mkEv(() => [this._base, new Set()]);  // additions, removals\n  }\n  has(key) {\n    this.subAll(([additions, removals]) => additions.has(key) || removals.has(key));\n    return this._base.has(key);\n  }\n  all() {\n    this.subAll();\n    return new Set(this._base);\n  }\n  readonly() { return new DepSet(() => this.all()); }\n  keys() { return this.all(); }\n  values() { return this.all(); }\n  entries() { return this.all(); }\n  size() {\n    this.subAll(([additions, removals]) => additions.size !== removals.size);\n    return this._base.size;\n  }\n  union(other) { return new DepSet(() => union(this.all(), _castOther(other))); }\n  intersection(other) { return new DepSet(() => intersection(this.all(), _castOther(other))); }\n  difference(other) { return new DepSet(() => difference(this.all(), _castOther(other))); }\n  symmetricDifference(other) {\n    return new DepSet(() => {\n      return difference(this.union(other).all(), this.intersection(other).all());\n    });\n  }\n  _update(y) { return transaction(() => {\n    let old_ = new Set(this._base);\n    let new_ = objToJSSet(y);\n\n    let additions = new Set();\n    let removals = new Set();\n\n    // JS sets don't come with subtraction :(\n    old_.forEach(function(item) { if (!new_.has(item)) { return removals.add(item); } });\n    new_.forEach(function(item) { if (!old_.has(item)) { return additions.add(item); } });\n\n    old_.forEach(item => this._base.delete(item));\n    new_.forEach(item => this._base.add(item));\n\n    this.onChange.pub([\n      additions,\n      removals\n    ]);\n    return old_;\n  }); }\n}\n\nexport class SrcSet extends ObsSet {\n  add(item) { return recorder.mutating(() => {\n    if (!this._base.has(item)) {\n      this._base.add(item);\n      this.onChange.pub([\n        new Set([item]),\n        new Set()\n      ]);\n    }\n    return item;\n  }); }\n  put(item) { return this.add(item); }\n  delete(item) { return recorder.mutating(() => {\n    if (this._base.has(item)) {\n      this._base.delete(item);\n      this.onChange.pub([\n        new Set(),\n        new Set([item])\n      ]);\n    }\n    return item;\n  }); }\n  remove(item) { return this.delete(item); }\n  clear() { return recorder.mutating(() => {\n    let removals = new Set(this._base);\n    if (this._base.size) {\n      this._base.clear();\n      this.onChange.pub([\n        new Set(),\n        removals\n      ]);\n    }\n    return removals;\n  }); }\n  update(y) { return recorder.mutating(() => this._update(y)); }\n}\n\nexport class DepSet extends ObsSet {\n  constructor(f) {\n    super();\n    this.f = f;\n    let c = bind(this.f);\n    autoSub(c.onSet, ([old, val]) => this._update(val));\n  }\n}\n\nexport let liftSpec = obj => {\n  let result = [];\n  let val, type;\n  for (let name of Object.getOwnPropertyNames(obj)) {\n    val = obj[name];\n    if (val != null && [ObsMap, ObsCell, ObsArray, ObsSet].some(cls => val instanceof cls)) {\n      continue;\n    } else if (_.isFunction(val)) {\n      type = null;\n    } else if (_.isArray(val)) {\n      type = \"array\";\n    } else if (val instanceof Set) {\n      type = \"set\";\n    } else if (val instanceof Map) {\n      type = \"map\";\n    } else {\n      type = \"cell\";\n    }\n    result.push([name, {type, val}]);\n  }\n  return _.object(result);\n};\n\nexport let lift = function(x, fieldspec) {\n  if (fieldspec == null) {\n    fieldspec = liftSpec(x);\n  }\n\n  return _.mapObject(fieldspec, function({type}, name) {\n    if (!(x[name] instanceof ObsBase) && type in types) { return rxTypes[type](x[name]); }\n    return x[name];\n  });\n};\n\nexport let unlift = x => _.mapObject(x, function(v) {\n  if (v instanceof ObsBase) { return v.all(); }\n  else { return v; }\n});\n\n//\n// Implicitly reactive objects\n//\nexport let reactify = function(obj, fieldspec) {\n  let spec;\n  if (_.isArray(obj)) {\n    let arr = array(_.clone(obj));\n    Object.defineProperties(obj, _.object(\n      Object.getOwnPropertyNames(SrcArray.prototype)\n        .concat(Object.getOwnPropertyNames(ObsArray.prototype))\n        .concat(Object.getOwnPropertyNames(ObsBase.prototype))\n        .filter((methName) => methName !== \"length\").map((methName) => {\n          let meth = obj[methName];\n          let newMeth = function(...args) {\n            let res;\n            if (meth != null) { res = meth.call(obj, ...args); }\n            arr[methName].call(arr, ...args);\n            return res;\n          };\n          spec = {\n            configurable: true,\n            enumerable: false,\n            value: newMeth,\n            writable: true\n          };\n          return [methName, spec];\n        })\n    )\n    );\n    return obj;\n  } else {\n    return Object.defineProperties(obj, _.object((() => {\n      let result = [];\n\n      for (let name in fieldspec) {\n        spec = fieldspec[name];\n        result.push((function(name, spec) {\n          let desc = null;\n          switch (spec.type) {\n          case \"cell\": {\n            let obs = cell(spec.val != null ? spec.val : null);\n            desc = {\n              configurable: true,\n              enumerable: true,\n              get() { return obs.get(); },\n              set(x) { return obs.set(x); }\n            };\n            break;\n          }\n          case \"array\": {\n            let view = reactify(spec.val != null ? spec.val : []);\n            desc = {\n              configurable: true,\n              enumerable: true,\n              get() {\n                view.all();\n                return view;\n              },\n              set(x) {\n                view.splice(0, view.length, ...x);\n                return view;\n              }\n            };\n            break;\n          }\n          default: throw new Error(`Unknown observable type: ${spec.type}`);\n          }\n          return [name, desc];\n        })(name, spec));\n      }\n\n      return result;\n    })())\n    );\n  }\n};\nexport let autoReactify = obj => {\n  let result = [];\n\n  for (let name of Object.getOwnPropertyNames(obj)) {\n    let val = obj[name];\n    if (val instanceof ObsBase) {\n      continue;\n    }\n    let type =\n      _.isFunction(val) ? null\n        : _.isArray(val) ? \"array\"\n          : \"cell\";\n    result.push([name, {type, val}]);\n  }\n\n  reactify(obj, _.object(result));\n};\n\nexport let cell = value => new SrcCell(value);\ncell.from = function(value) {\n  if (value instanceof ObsCell) { return value;\n  } else if (value instanceof ObsBase) { return bind(() => value.all());\n  } else { return bind(() => value); }\n};\n\nexport let array = (xs, diff) => new SrcArray((xs != null ? xs : []).map(cell), diff);\narray.from = function(value, diff) {\n  let f;\n  if (value instanceof ObsArray) { return value;\n  } else if (_.isArray(value)) { f = () => value;\n  } else if (value instanceof ObsBase) { f = () => value.all();\n  } else { throw new Error(`Cannot cast ${value.constructor.name} to array!`); }\n\n  return new DepArray(f, diff);\n};\n\nexport let map = value => new SrcMap(value);\nmap.from = function(value) {\n  if (value instanceof ObsMap) { return value;\n  } else if (value instanceof ObsBase) { return new DepMap(function() { return value.all(); });\n  } else { return new DepMap(function() { return value; }); }\n};\n\n\nexport let set = value => new SrcSet(value);\nset.from = function(value) {\n  if (value instanceof ObsSet) { return value;\n  } else if (value instanceof ObsBase) { return new DepSet(function() { return value.all(); });\n  } else { return new DepSet(function() { return value; }); }\n};\n\nlet rxTypes = {cell, array, map, set};\n\nexport let cast = function(value, type) {\n  if (type == null) { type = \"cell\"; }\n  if ([ObsCell, ObsArray, ObsMap, ObsSet].includes(type)) {\n    let realType = null;\n    switch (type) {\n    case ObsCell: realType = \"cell\"; break;\n    case ObsArray: realType = \"array\"; break;\n    case ObsMap: realType = \"map\"; break;\n    case ObsSet: realType = \"set\"; break;\n    }\n    type = realType;\n  }\n  if (_.isString(type)) {\n    if (type in types) { return rxTypes[type].from(value);\n    } else { return value; }\n  } else {\n    let opts  = value;\n    let types = type;\n    return _.mapObject(opts, function(value, key) {\n      if (types[key]) { return cast(value, types[key]); }\n      else { return value; }\n    });\n  }\n};\n\n//\n// Reactive utilities\n//\n\nexport let flatten = xs => new DepArray(() => _\n  .chain(flattenHelper([xs]))\n  .flatten()\n  .filter(x => x != null)\n  .value()\n);\n\nlet flattenHelper = function(x) {\n  if (x instanceof ObsArray) { return flattenHelper(x.all());\n  } else if (x instanceof ObsSet) { return flattenHelper(Array.from(x.values()));\n  } else if (x instanceof ObsCell) { return flattenHelper(x.get());\n  } else if (x instanceof Set) { return flattenHelper(Array.from(x));\n  } else if (_.isFunction(x)) { return flattenHelper(bind(x).get());\n  } else if (_.isArray(x)) { return x.map(x_k => flattenHelper(x_k));\n  } else { return x; }\n};\n\nexport let cellToArray = (cell, diff) => new DepArray((function() { return cell.get(); }), diff);\nexport let cellToMap = cell => new DepMap(function() { return cell.get(); });\nexport let cellToSet = c => new DepSet(function() { return c.get(); });\n\n// O(n) using hash key\nexport let basicDiff = function(key) {\n  if (key == null) {\n    key = smartUidify;\n  }\n  return function(oldXs, newXs) {\n    let oldKeys = mkMap(oldXs.map((x, i) => [key(x), i]));\n    let left;\n    return newXs.map(x => {\n      left = oldKeys[key(x)];\n      return left != null ? left : -1;\n    });\n  };\n};\n\nexport let _rxUid = Symbol(\"rx uid\");\n\nexport let uidify = x =>\n  x[_rxUid] != null ? x[_rxUid] : (\n    Object.defineProperty(x, _rxUid, {\n      enumerable: false,\n      value: mkuid()\n    })\n  )[_rxUid]\n;\n\n// Need a \"hash\" that distinguishes different types and distinguishes object\n// UIDs from ints.\nexport let smartUidify = function(x) {\n  if (_.isObject(x)) {\n    return uidify(x);\n  } else {\n    return JSON.stringify(x);\n  }\n};\n\n// Note: this gives up and returns null if there are reorderings or\n// duplications; only handles (multiple) simple insertions and removals\n// (batching them together into splices).\nlet permToSplices = function(oldLength, newXs, perm) {\n  let i;\n  if (!newXs.length) {\n    return null; // just do a full splice if we're emptying the array\n  }\n  let refs = perm.filter(i => i >= 0);\n  let end = refs.length -1;\n  let asc = 0 <= end;\n  let giveUp = [];\n  for (i = 0; asc ? i < end : i > end; asc ? i++ : i--) {\n    giveUp.push((refs[i + 1] - refs[i]) <= 0);\n  }\n  if (giveUp.some(_.identity)) { return null; }\n\n  let splices = [];\n  let last = -1;\n  i = 0;\n  while (i < perm.length) {\n    // skip over any good consecutive runs\n    while (i < perm.length && perm[i] === last + 1) {\n      last += 1;\n      i += 1;\n    }\n    // lump any additions into this splice\n    let splice = {index: i, count: 0, additions: []};\n    while (i < perm.length && perm[i] === -1) {\n      splice.additions.push(newXs[i]);\n      i += 1;\n    }\n    // Find the step difference to find how many from old were removed/skipped;\n    // if no step (perm[i] == last + 1) then count should be 0.  If we see no\n    // more references to old elements, then we need oldLength to determine how\n    // many remaining old elements were logically removed.\n    let cur = i === perm.length ? oldLength : perm[i];\n    splice.count = cur - (last + 1);\n    if (splice.count > 0 || splice.additions.length > 0) {\n      splices.push([splice.index, splice.count, splice.additions]);\n    }\n    last = cur;\n    i += 1;\n  }\n  return splices;\n};\n\nexport let transaction = f => depMgr.transaction(f);"]}